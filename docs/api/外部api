# AIGents API 接口文档

## 概述

AIGents 是一个基于 FastAPI 的 AI 代理平台，提供会话管理、AI 查询、资源管理、记忆管理和历史记录等功能。所有 API 都遵循统一的响应格式。

**基础信息：**
- 基础 URL: `http://localhost:8000`
- API 版本: v0.1.0
- 响应格式: JSON
- 支持 CORS

## 统一响应格式

所有 API 响应都遵循以下统一格式：

```json
{
  "success": true,
  "data": {},
  "error": null,
  "message": "操作成功",
  "timestamp": "2024-01-01T12:00:00Z",
  "request_id": "optional-request-id"
}
```

**字段说明：**
- `success`: 布尔值，表示请求是否成功
- `data`: 响应数据（成功时）
- `error`: 错误代码（失败时）
- `message`: 人类可读的消息
- `timestamp`: 响应时间戳
- `request_id`: 可选的请求追踪ID

## 1. 会话管理 API

### 1.1 创建会话 (create_session)

**核心接口** - 创建新的 AI 代理会话

```http
POST /api/sessions
Content-Type: application/json
```

**请求体（可选）：**
```json
{
  "config": {
    "features": {
      "memories": true,
      "events": true,
      "docs": true,
      "texts": true,
      "images": true,
      "retrieval": false
    },
    "custom_mcp_servers": {
      "custom_service": {
        "command": "python",
        "args": ["/path/to/server.py"]
      }
    },
    "system": {
      "system_prompt": "你是一个专业的AI助手"
    }
  },
  "metadata": {
    "user_id": "user123",
    "project_name": "我的项目"
  }
}
```

**响应示例：**
```json
{
  "success": true,
  "data": {
    "session_id": "550e8400-e29b-41d4-a716-446655440000",
    "status": "active",
    "created_at": "2024-01-01T12:00:00Z",
    "last_activity": "2024-01-01T12:00:00Z",
    "config": {
      "mcp_services": ["resources", "memories", "messages", "events", "docs", "texts", "images"]
    },
    "stats": {
      "resources": 0,
      "memories": 0,
      "events": 0
    }
  },
  "message": "Session 550e8400-e29b-41d4-a716-446655440000 created successfully"
}
```

### 1.2 获取会话信息

```http
GET /api/sessions/{session_id}
```

**响应示例：**
```json
{
  "success": true,
  "data": {
    "session_id": "550e8400-e29b-41d4-a716-446655440000",
    "status": "active",
    "created_at": "2024-01-01T12:00:00Z",
    "last_activity": "2024-01-01T12:30:00Z",
    "config": {
      "mcp_services": ["resources", "memories", "messages", "events", "docs", "texts", "images"]
    },
    "stats": {
      "resources": 5,
      "memories": 3,
      "events": 12
    }
  }
}
```

### 1.3 删除会话

```http
DELETE /api/sessions/{session_id}
```

### 1.4 获取会话配置

```http
GET /api/sessions/{session_id}/config
```

### 1.5 更新会话配置

```http
PUT /api/sessions/{session_id}/config
Content-Type: application/json
```

**请求体：**
```json
{
  "features": {
    "memories": true,
    "retrieval": true
  },
  "system": {
    "system_prompt": "更新的系统提示"
  }
}
```

### 1.6 获取可用功能

```http
GET /api/sessions/features
```

## 2. AI 查询 API

### 2.1 发送查询（SSE 流式响应）

```http
POST /api/sessions/{session_id}/query
Content-Type: application/json
Accept: text/event-stream
```

**请求体：**
```json
{
  "query": "请帮我分析这个代码文件",
  "context": {
    "file_path": "/path/to/file.py",
    "additional_info": "这是一个Python脚本"
  },
  "stream": true
}
```

**SSE 响应流：**
```
data: {"type": "start", "data": {"query_id": "query123"}, "timestamp": "2024-01-01T12:00:00Z"}

data: {"type": "message", "data": {"content": "我来帮你分析这个代码文件..."}, "timestamp": "2024-01-01T12:00:01Z"}

data: {"type": "tool_use", "data": {"tool": "read_file", "args": {"/path/to/file.py"}}, "timestamp": "2024-01-01T12:00:02Z"}

data: {"type": "result", "data": {"content": "分析完成，这个文件包含..."}, "timestamp": "2024-01-01T12:00:05Z"}

data: {"type": "complete", "data": {}, "timestamp": "2024-01-01T12:00:06Z"}
```

### 2.2 中断处理

```http
POST /api/sessions/{session_id}/interrupt
```

## 3. 资源管理 API

### 3.1 上传资源

```http
POST /api/sessions/{session_id}/resources/upload
Content-Type: multipart/form-data
```

**表单数据：**
- `file`: 文件（必需）
- `resource_type`: 资源类型（可选：images, texts, docs, codes）
- `tags`: 标签，逗号分隔（可选）

**响应示例：**
```json
{
  "success": true,
  "data": {
    "resource_id": "res_123456",
    "resource_type": "texts",
    "mime_type": "text/plain",
    "size": 1024,
    "metadata": {
      "filename": "example.txt",
      "content_type": "text/plain",
      "size": 1024,
      "upload_time": "2024-01-01T12:00:00Z",
      "tags": ["document", "important"]
    }
  },
  "message": "Resource example.txt uploaded successfully"
}
```

### 3.2 列出资源

```http
GET /api/sessions/{session_id}/resources?resource_type=texts&limit=50
```

### 3.3 删除资源

```http
DELETE /api/sessions/{session_id}/resources/{resource_id}
```

## 4. 记忆管理 API

### 4.1 列出记忆

```http
GET /api/sessions/{session_id}/memories?category=User%20Preferences&priority=High&limit=50
```

**查询参数：**
- `category`: 记忆分类（可选）
- `priority`: 优先级（High/Medium/Low）
- `status`: 状态（Active/Archived/Deprecated）
- `tag`: 标签过滤
- `limit`: 返回数量限制

**响应示例：**
```json
{
  "success": true,
  "data": {
    "items": [
      {
        "id": "mem_123",
        "title": "用户偏好设置",
        "category": "User Preferences",
        "priority": "High",
        "tags": ["settings", "ui"],
        "status": "Active",
        "author": "AI Agent",
        "version": 1,
        "created": "2024-01-01T12:00:00Z",
        "updated": "2024-01-01T12:00:00Z"
      }
    ],
    "total": 1,
    "per_page": 50
  }
}
```

### 4.2 获取记忆详情

```http
GET /api/sessions/{session_id}/memories/{memory_id}
```

### 4.3 创建记忆

```http
POST /api/sessions/{session_id}/memories
Content-Type: application/json
```

**请求体：**
```json
{
  "title": "项目配置偏好",
  "category": "Project Context",
  "context": "用户在配置项目时的偏好设置",
  "key_info": [
    "喜欢使用 TypeScript",
    "偏好 React 框架",
    "使用 Tailwind CSS"
  ],
  "usage": "在创建新项目时参考这些偏好",
  "priority": "High",
  "resources": ["config_template.json"],
  "tags": ["project", "preferences"]
}
```

### 4.4 更新记忆

```http
PUT /api/sessions/{session_id}/memories/{memory_id}
Content-Type: application/json
```

### 4.5 删除记忆

```http
DELETE /api/sessions/{session_id}/memories/{memory_id}
```

## 5. 历史记录 API

### 5.1 列出事件

```http
GET /api/sessions/{session_id}/events?limit=50
```

**响应示例：**
```json
{
  "success": true,
  "data": {
    "items": [
      {
        "id": "event_123",
        "type": "upload_resource",
        "status": "completed",
        "title": "Upload example.txt",
        "timestamp": "2024-01-01T12:00:00Z",
        "duration_ms": 1500,
        "message_count": 3,
        "has_error": false
      }
    ],
    "total": 1,
    "per_page": 50
  }
}
```

### 5.2 获取事件详情

```http
GET /api/sessions/{session_id}/events/{event_id}
```

### 5.3 搜索消息

```http
GET /api/sessions/{session_id}/messages?query=search_term&message_type=user&limit=50
```

## 6. 错误处理

### 常见错误代码

| 错误代码 | HTTP状态码 | 描述 |
|---------|-----------|------|
| `SESSION_NOT_FOUND` | 404 | 会话不存在 |
| `SESSION_CREATE_FAILED` | 400 | 会话创建失败 |
| `RESOURCE_NOT_FOUND` | 404 | 资源不存在 |
| `MEMORY_NOT_FOUND` | 404 | 记忆不存在 |
| `EVENT_NOT_FOUND` | 404 | 事件不存在 |
| `UPLOAD_FAILED` | 500 | 文件上传失败 |
| `INVALID_REQUEST` | 400 | 请求格式无效 |
| `INTERRUPT_FAILED` | 500 | 中断处理失败 |

### 错误响应格式

```json
{
  "success": false,
  "data": null,
  "error": "SESSION_NOT_FOUND",
  "message": "Session not found",
  "timestamp": "2024-01-01T12:00:00Z"
}
```

## 7. 数据模型

### 会话状态枚举
```typescript
enum SessionStatus {
  ACTIVE = "active",
  IDLE = "idle", 
  TERMINATED = "terminated"
}
```

### 记忆分类枚举
```typescript
enum MemoryCategory {
  USER_PREFERENCES = "User Preferences",
  PROJECT_CONTEXT = "Project Context",
  TECHNICAL_SPECIFICATIONS = "Technical Specifications",
  PERSONAL_INFORMATION = "Personal Information",
  CONVERSATION_HISTORY = "Conversation History",
  TASK_INSTRUCTIONS = "Task Instructions",
  DOMAIN_KNOWLEDGE = "Domain Knowledge",
  CODE_PATTERNS = "Code Patterns",
  CUSTOM = "Custom"
}
```

### 优先级枚举
```typescript
enum PriorityLevel {
  HIGH = "High",
  MEDIUM = "Medium",
  LOW = "Low"
}
```

## 8. 使用示例

### Python 客户端示例

```python
import requests
import json

# 创建会话
response = requests.post('http://localhost:8000/api/sessions', json={
    "config": {
        "features": {
            "memories": True,
            "retrieval": True
        }
    }
})
session_data = response.json()
session_id = session_data['data']['session_id']

# 上传文件
with open('example.txt', 'rb') as f:
    files = {'file': f}
    data = {'tags': 'document,important'}
    response = requests.post(
        f'http://localhost:8000/api/sessions/{session_id}/resources/upload',
        files=files,
        data=data
    )

# 发送查询
response = requests.post(
    f'http://localhost:8000/api/sessions/{session_id}/query',
    json={"query": "分析刚上传的文件"},
    headers={'Accept': 'text/event-stream'},
    stream=True
)

for line in response.iter_lines():
    if line:
        event_data = json.loads(line.decode('utf-8').replace('data: ', ''))
        print(f"事件类型: {event_data['type']}, 数据: {event_data['data']}")
```

### JavaScript 客户端示例

```javascript
// 创建会话
const createSession = async () => {
  const response = await fetch('http://localhost:8000/api/sessions', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
      config: {
        features: {
          memories: true,
          retrieval: true
        }
      }
    })
  });
  const data = await response.json();
  return data.data.session_id;
};

// SSE 查询
const queryWithSSE = (sessionId, query) => {
  const eventSource = new EventSource(
    `http://localhost:8000/api/sessions/${sessionId}/query`,
    {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({query})
    }
  );
  
  eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('事件:', data.type, '数据:', data.data);
    
    if (data.type === 'complete') {
      eventSource.close();
    }
  };
};
```

## 9. 健康检查

```http
GET /health
```

**响应：**
```json
{
  "success": true,
  "data": {
    "status": "healthy",
    "timestamp": "2024-01-01T12:00:00Z"
  },
  "message": "Service is healthy"
}
```

---

**注意事项：**
1. 所有需要 `session_id` 的接口都要求会话已存在
2. 文件上传支持自动类型检测
3. SSE 查询支持实时流式响应
4. 记忆管理支持丰富的分类和优先级系统
5. 所有 API 都支持 CORS，便于前端集成